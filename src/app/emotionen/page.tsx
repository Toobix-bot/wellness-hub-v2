'use client';

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface Emotion {
  id: string;
  name: string;
  category: 'basis' | 'komplex' | 'sozial' | 'self';
  description: string;
  purpose: string;
  triggers: string[];
  physicalSensations: string[];
  thoughts: string[];
  behaviors: string[];
  healthyExpression: string[];
  unhealthyExpression: string[];
  managementStrategies: string[];
  relatedEmotions: string[];
  intensity: number;
  color: string;
  icon: string;
  quotes: string[];
  exercises: Exercise[];
}

interface Exercise {
  id: string;
  name: string;
  description: string;
  duration: string;
  difficulty: 'einfach' | 'mittel' | 'fortgeschritten';
  steps: string[];
  benefits: string[];
}

interface EmotionLog {
  id: string;
  emotion: string;
  intensity: number;
  trigger: string;
  thoughts: string;
  physicalSensations: string[];
  response: string;
  reflection: string;
  timestamp: string;
  context: string;
  duration: number; // in Minuten
}

interface MoodPattern {
  emotion: string;
  frequency: number;
  averageIntensity: number;
  commonTriggers: string[];
  timePatterns: { [key: string]: number };
}

export default function EmotionserklaerungsSystemPage() {
  const [activeTab, setActiveTab] = useState<'explore' | 'tracker' | 'patterns' | 'exercises'>('explore');
  const [selectedEmotion, setSelectedEmotion] = useState<Emotion | null>(null);
  const [emotionLogs, setEmotionLogs] = useState<EmotionLog[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('alle');
  const [searchTerm, setSearchTerm] = useState('');
  const [showLogForm, setShowLogForm] = useState(false);
  const [newLog, setNewLog] = useState<Partial<EmotionLog>>({
    emotion: '',
    intensity: 5,
    trigger: '',
    thoughts: '',
    physicalSensations: [],
    response: '',
    reflection: '',
    context: '',
    duration: 30
  });

  // Emotionen-Datenbank
  const emotions: Emotion[] = [
    {
      id: '1',
      name: 'Freude',
      category: 'basis',
      description: 'Ein positives Gef√ºhl der Zufriedenheit, des Gl√ºcks und der Begeisterung',
      purpose: 'Motiviert uns, positive Erfahrungen zu wiederholen und st√§rkt soziale Bindungen',
      triggers: ['Erfolg', '√úberraschungen', 'Zeit mit geliebten Menschen', 'Erreichen von Zielen', 'Sch√∂ne Erinnerungen'],
      physicalSensations: ['L√§cheln', 'Entspannte Muskeln', 'Erh√∂hte Herzfrequenz', 'Warmes Gef√ºhl in der Brust', 'Energie'],
      thoughts: ['Das ist wunderbar', 'Ich f√ºhle mich lebendig', 'Das Leben ist sch√∂n', 'Ich bin dankbar'],
      behaviors: ['Lachen', 'Teilen der Freude', 'Tanzen', 'Singen', 'Umarmungen geben'],
      healthyExpression: ['Freude mit anderen teilen', 'Dankbarkeit ausdr√ºcken', 'Positive Momente bewusst wahrnehmen'],
      unhealthyExpression: ['Manische Episoden', 'Verleugnung negativer Realit√§ten', 'Oberfl√§chlichkeit'],
      managementStrategies: ['Dankbarkeitstagebuch', 'Positive Erinnerungen sammeln', 'Freude bewusst kultivieren'],
      relatedEmotions: ['Begeisterung', 'Zufriedenheit', 'Liebe', 'Hoffnung'],
      intensity: 7,
      color: 'from-yellow-400 to-orange-500',
      icon: 'üòä',
      quotes: [
        'Freude ist das einfachste Gebet - Karl Barth',
        'Die Freude liegt im Kampf, im Versuch, im Leiden, nicht im Sieg selbst - Mahatma Gandhi'
      ],
      exercises: [
        {
          id: '1',
          name: 'Freude-Meditation',
          description: 'Eine gef√ºhrte Meditation, um Freude zu kultivieren',
          duration: '10-15 Minuten',
          difficulty: 'einfach',
          steps: [
            'Setze dich bequem hin und schlie√üe die Augen',
            'Atme tief ein und aus',
            'Denke an ein Moment purer Freude in deinem Leben',
            'Lass das Gef√ºhl durch deinen K√∂rper flie√üen',
            'L√§chle bewusst und sp√ºre die physischen Ver√§nderungen'
          ],
          benefits: ['Erh√∂ht das Wohlbefinden', 'Reduziert Stress', 'St√§rkt positive Emotionen']
        }
      ]
    },
    {
      id: '2',
      name: 'Trauer',
      category: 'basis',
      description: 'Ein tiefes Gef√ºhl des Verlustes, der Entt√§uschung oder des Schmerzes',
      purpose: 'Hilft bei der Verarbeitung von Verlusten und signalisiert anderen unser Bed√ºrfnis nach Unterst√ºtzung',
      triggers: ['Verlust', 'Entt√§uschung', 'Trennung', 'Erinnerungen', 'Unerf√ºllte Erwartungen'],
      physicalSensations: ['Schwere in der Brust', 'Tr√§nen', 'M√ºdigkeit', 'Kopfschmerzen', 'Verlangsamte Bewegungen'],
      thoughts: ['Es tut so weh', 'Ich vermisse...', 'Es wird nie wieder so sein', 'Warum ich?'],
      behaviors: ['Weinen', 'R√ºckzug', 'Schweigen', 'Langsame Bewegungen', 'Suche nach Trost'],
      healthyExpression: ['Weinen zulassen', '√úber Gef√ºhle sprechen', 'Trauerrituale', 'Unterst√ºtzung suchen'],
      unhealthyExpression: ['Langanhaltende Depression', 'Isolation', 'Selbstsch√§digung', 'Substanzmissbrauch'],
      managementStrategies: ['Professionelle Hilfe suchen', 'Trauerprozess respektieren', 'Selbstf√ºrsorge praktizieren'],
      relatedEmotions: ['Melancholie', 'Sehnsucht', 'Verlust', 'Schmerz'],
      intensity: 8,
      color: 'from-blue-600 to-indigo-700',
      icon: 'üò¢',
      quotes: [
        'Trauer ist der Preis, den wir f√ºr die Liebe zahlen - K√∂nigin Elizabeth II',
        'Die Tr√§nen sind die Sprache der Seele - Khalil Gibran'
      ],
      exercises: [
        {
          id: '2',
          name: 'Trauer-Ritual',
          description: 'Ein achtsames Ritual zur Verarbeitung von Trauer',
          duration: '20-30 Minuten',
          difficulty: 'mittel',
          steps: [
            'Schaffe einen ruhigen, sicheren Raum',
            'Z√ºnde eine Kerze an als Symbol der Erinnerung',
            'Lass deine Tr√§nen flie√üen, ohne sie zu bewerten',
            'Schreibe einen Brief an das, was du verloren hast',
            'Sprich deine Gef√ºhle laut aus oder ins Kissen'
          ],
          benefits: ['Hilft bei der Verarbeitung', 'Reduziert emotionale Blockaden', 'F√∂rdert Heilung']
        }
      ]
    },
    {
      id: '3',
      name: 'Angst',
      category: 'basis',
      description: 'Ein Gef√ºhl der Unsicherheit und Sorge vor m√∂glichen Bedrohungen oder Gefahren',
      purpose: 'Sch√ºtzt uns vor Gefahren und bereitet uns auf Herausforderungen vor',
      triggers: ['Ungewissheit', 'Bedrohung', 'Neue Situationen', 'Leistungsdruck', 'Gesundheitssorgen'],
      physicalSensations: ['Herzrasen', 'Schwitzen', 'Zittern', 'Atemnot', 'Muskelverspannung', '√úbelkeit'],
      thoughts: ['Was wenn...', 'Ich kann das nicht', 'Es wird schlimm enden', 'Ich bin in Gefahr'],
      behaviors: ['Vermeidung', 'Unruhe', 'Kontrollverhalten', 'Flucht', 'Erstarrung'],
      healthyExpression: ['√Ñngste benennen', 'Unterst√ºtzung suchen', 'Entspannungstechniken anwenden'],
      unhealthyExpression: ['Panikattacken', 'Phobien', 'Zwangsverhalten', 'Soziale Isolation'],
      managementStrategies: ['Atem√ºbungen', 'Progressive Muskelentspannung', 'Kognitive Umstrukturierung', 'Achtsamkeit'],
      relatedEmotions: ['Nervosit√§t', 'Sorge', 'Panik', 'Furcht'],
      intensity: 6,
      color: 'from-red-500 to-orange-600',
      icon: 'üò∞',
      quotes: [
        'Mut ist nicht die Abwesenheit von Angst, sondern die Beurteilung, dass etwas anderes wichtiger ist als die Angst - Ambrose Redmoon',
        'Das einzige, was wir zu f√ºrchten haben, ist die Furcht selbst - Franklin D. Roosevelt'
      ],
      exercises: [
        {
          id: '3',
          name: '4-7-8 Atemtechnik',
          description: 'Eine bew√§hrte Atemtechnik zur Angstreduzierung',
          duration: '5-10 Minuten',
          difficulty: 'einfach',
          steps: [
            'Atme vollst√§ndig durch den Mund aus',
            'Schlie√üe den Mund und atme durch die Nase f√ºr 4 Sekunden ein',
            'Halte den Atem f√ºr 7 Sekunden an',
            'Atme durch den Mund f√ºr 8 Sekunden aus',
            'Wiederhole 3-4 Zyklen'
          ],
          benefits: ['Aktiviert das parasympathische Nervensystem', 'Reduziert Angst sofort', 'Verbessert die Kontrolle']
        }
      ]
    },
    {
      id: '4',
      name: 'Wut',
      category: 'basis',
      description: 'Eine intensive Emotion als Reaktion auf Frustration, Ungerechtigkeit oder Bedrohung',
      purpose: 'Mobilisiert Energie zur Verteidigung und zum Schutz unserer Grenzen',
      triggers: ['Ungerechtigkeit', 'Frustration', 'Verletzung', 'Machtlosigkeit', 'Grenz√ºberschreitung'],
      physicalSensations: ['Erh√∂hte Herzfrequenz', 'Angespannte Muskeln', 'Hitzegef√ºhl', 'Geballte F√§uste', 'Z√§hneknirschen'],
      thoughts: ['Das ist nicht fair', 'Wie k√∂nnen sie nur', 'Ich k√∂nnte explodieren', 'Sie respektieren mich nicht'],
      behaviors: ['Schreien', 'Schlagen', 'Werfen', 'Sarkasmus', 'R√ºckzug'],
      healthyExpression: ['Grenzen kommunizieren', 'Energie in Sport umwandeln', 'Assertive Kommunikation'],
      unhealthyExpression: ['Gewalt', 'Zerst√∂rung', 'Verletzende Worte', 'Langanhaltender Groll'],
      managementStrategies: ['Timeout nehmen', 'K√∂rperliche Aktivit√§t', 'Tiefes Atmen', 'Perspektivwechsel'],
      relatedEmotions: ['Frustration', '√Ñrger', 'Emp√∂rung', 'Verachtung'],
      intensity: 8,
      color: 'from-red-600 to-red-700',
      icon: 'üò†',
      quotes: [
        'Wut ist ein Wind, der die Lampe des Geistes ausl√∂scht - Robert Green Ingersoll',
        'F√ºr jede Minute, die du w√ºtend bist, verlierst du 60 Sekunden Gl√ºck - Ralph Waldo Emerson'
      ],
      exercises: [
        {
          id: '4',
          name: 'Wut-Entladung',
          description: 'Sichere Methoden, um Wut physisch zu entladen',
          duration: '10-15 Minuten',
          difficulty: 'einfach',
          steps: [
            'Finde einen sicheren, privaten Raum',
            'Schlage in ein Kissen oder schreie ins Kissen',
            'Mache schnelle Bewegungen wie Joggen oder Seilspringen',
            'Zerkn√ºlle Papier und wirf es in den M√ºlleimer',
            'Atme tief durch, bis sich die Intensit√§t reduziert'
          ],
          benefits: ['Reduziert k√∂rperliche Anspannung', 'Verhindert explosive Ausbr√ºche', 'Schafft Klarheit']
        }
      ]
    },
    {
      id: '5',
      name: 'Scham',
      category: 'komplex',
      description: 'Ein schmerzhaftes Gef√ºhl der eigenen Minderwertigkeit oder Unzul√§nglichkeit',
      purpose: 'Reguliert soziales Verhalten und motiviert zur Selbstverbesserung',
      triggers: ['√ñffentliche Blo√üstellung', 'Moralische Verfehlung', 'Ablehnung', 'Kritik', 'Versagen'],
      physicalSensations: ['Rotes Gesicht', 'Hitzegef√ºhl', 'Zusammengesunkene Haltung', 'Vermeidung von Blickkontakt'],
      thoughts: ['Ich bin schlecht', 'Ich bin ein Versager', 'Alle sehen meine Schw√§chen', 'Ich bin es nicht wert'],
      behaviors: ['Verstecken', 'R√ºckzug', 'Perfektionismus', 'Selbstkritik', '√úberkompensation'],
      healthyExpression: ['Vulnerabilit√§t zeigen', 'Um Vergebung bitten', 'Selbstmitgef√ºhl entwickeln'],
      unhealthyExpression: ['Soziale Isolation', 'Selbstverletzung', 'Depression', 'Suchtverhalten'],
      managementStrategies: ['Selbstmitgef√ºhl praktizieren', 'Perfektionismus loslassen', 'Vulnerabilit√§t als St√§rke sehen'],
      relatedEmotions: ['Peinlichkeit', 'Reue', 'Schuld', 'Verlegenheit'],
      intensity: 9,
      color: 'from-purple-600 to-purple-800',
      icon: 'üò≥',
      quotes: [
        'Scham korrodiert den Teil von uns, der glaubt, dass wir zur Ver√§nderung f√§hig sind - Bren√© Brown',
        'Die Scham ist ein L√ºgner - Jon Acuff'
      ],
      exercises: [
        {
          id: '5',
          name: 'Selbstmitgef√ºhls-√úbung',
          description: 'Eine √úbung zur Heilung von Scham durch Selbstmitgef√ºhl',
          duration: '15-20 Minuten',
          difficulty: 'mittel',
          steps: [
            'Erkenne deine Scham ohne Urteil an',
            'Lege eine Hand auf dein Herz',
            'Sage zu dir: "Das ist ein Moment des Leidens"',
            'Erinnere dich: "Leiden ist Teil der menschlichen Erfahrung"',
            'Sage liebevoll: "M√∂ge ich mir Freundlichkeit schenken"'
          ],
          benefits: ['Reduziert Selbstkritik', 'F√∂rdert emotionale Heilung', 'St√§rkt Selbstakzeptanz']
        }
      ]
    },
    {
      id: '6',
      name: 'Stolz',
      category: 'komplex',
      description: 'Ein positives Gef√ºhl der Zufriedenheit mit eigenen Leistungen oder Eigenschaften',
      purpose: 'Belohnt Erfolg und motiviert zu weiteren Leistungen',
      triggers: ['Pers√∂nliche Erfolge', 'Anerkennung', 'Zielerreichung', '√úberwindung von Hindernissen'],
      physicalSensations: ['Aufrechte Haltung', 'Erhobener Kopf', 'L√§cheln', 'Warmes Gef√ºhl in der Brust'],
      thoughts: ['Ich habe es geschafft', 'Ich bin stolz auf mich', 'Das war eine gute Leistung'],
      behaviors: ['Erfolg teilen', 'Selbstbewusste K√∂rperhaltung', 'L√§cheln', 'Anderen erz√§hlen'],
      healthyExpression: ['Erfolge anerkennen', 'Bescheidenheit bewahren', 'Andere inspirieren'],
      unhealthyExpression: ['Arroganz', '√úberheblichkeit', 'Geringsch√§tzung anderer', 'Narzissmus'],
      managementStrategies: ['Balance zwischen Selbstvertrauen und Demut', 'Erfolge mit anderen teilen'],
      relatedEmotions: ['Zufriedenheit', 'Selbstvertrauen', 'Triumph', 'Genugtuung'],
      intensity: 6,
      color: 'from-green-500 to-emerald-600',
      icon: 'üòå',
      quotes: [
        'Sei stolz auf wie weit du gekommen bist, und hab Vertrauen in wie weit du noch gehen kannst',
        'Stolz ist ein pers√∂nliches Engagement. Es ist eine Haltung, die die Qualit√§t trennt'
      ],
      exercises: [
        {
          id: '6',
          name: 'Erfolgs-Reflexion',
          description: 'Eine √úbung zur bewussten W√ºrdigung eigener Erfolge',
          duration: '10-15 Minuten',
          difficulty: 'einfach',
          steps: [
            'Liste drei aktuelle Erfolge auf, auch kleine',
            'Beschreibe, welche Anstrengungen dazu gef√ºhrt haben',
            'Sp√ºre das Gef√ºhl des Stolzes bewusst',
            'Teile einen Erfolg mit jemandem, der dir wichtig ist',
            'Plane, wie du diese Energie f√ºr neue Ziele nutzen kannst'
          ],
          benefits: ['St√§rkt Selbstvertrauen', 'Motiviert zu neuen Zielen', 'Verbessert Selbstwahrnehmung']
        }
      ]
    }
  ];

  // Kategorien
  const categories = [
    { id: 'alle', name: 'Alle Emotionen', icon: 'üé≠', color: 'from-purple-500 to-pink-600' },
    { id: 'basis', name: 'Basis-Emotionen', icon: 'üíñ', color: 'from-red-500 to-pink-600' },
    { id: 'komplex', name: 'Komplexe Emotionen', icon: 'üß†', color: 'from-blue-500 to-indigo-600' },
    { id: 'sozial', name: 'Soziale Emotionen', icon: 'üë•', color: 'from-green-500 to-teal-600' },
    { id: 'self', name: 'Selbst-Emotionen', icon: 'ü™û', color: 'from-yellow-500 to-orange-600' }
  ];

  // Local Storage
  useEffect(() => {
    const savedLogs = localStorage.getItem('emotionLogs');
    if (savedLogs) {
      setEmotionLogs(JSON.parse(savedLogs));
    }
  }, []);

  const saveEmotionLog = () => {
    if (!newLog.emotion || !newLog.trigger) return;

    const log: EmotionLog = {
      id: Date.now().toString(),
      emotion: newLog.emotion!,
      intensity: newLog.intensity!,
      trigger: newLog.trigger!,
      thoughts: newLog.thoughts || '',
      physicalSensations: newLog.physicalSensations || [],
      response: newLog.response || '',
      reflection: newLog.reflection || '',
      timestamp: new Date().toISOString(),
      context: newLog.context || '',
      duration: newLog.duration || 30
    };

    const updatedLogs = [...emotionLogs, log];
    setEmotionLogs(updatedLogs);
    localStorage.setItem('emotionLogs', JSON.stringify(updatedLogs));
    
    setNewLog({
      emotion: '',
      intensity: 5,
      trigger: '',
      thoughts: '',
      physicalSensations: [],
      response: '',
      reflection: '',
      context: '',
      duration: 30
    });
    setShowLogForm(false);
  };

  const filteredEmotions = emotions.filter(emotion => {
    const matchesCategory = selectedCategory === 'alle' || emotion.category === selectedCategory;
    const matchesSearch = emotion.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         emotion.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  const generateMoodPatterns = (): MoodPattern[] => {
    const emotionGroups = emotionLogs.reduce((acc, log) => {
      if (!acc[log.emotion]) {
        acc[log.emotion] = [];
      }
      acc[log.emotion].push(log);
      return acc;
    }, {} as { [key: string]: EmotionLog[] });

    return Object.entries(emotionGroups).map(([emotion, logs]) => {
      const averageIntensity = logs.reduce((sum, log) => sum + log.intensity, 0) / logs.length;
      const triggers = logs.map(log => log.trigger);
      const commonTriggers = [...new Set(triggers)].slice(0, 3);
      
      return {
        emotion,
        frequency: logs.length,
        averageIntensity: Math.round(averageIntensity * 10) / 10,
        commonTriggers,
        timePatterns: {} // Vereinfacht f√ºr diese Implementierung
      };
    }).sort((a, b) => b.frequency - a.frequency);
  };

  const getCategoryColor = (category: string) => {
    const cat = categories.find(c => c.id === category);
    return cat?.color || 'from-gray-500 to-gray-600';
  };

  const getIntensityColor = (intensity: number) => {
    if (intensity <= 3) return 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300';
    if (intensity <= 6) return 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300';
    if (intensity <= 8) return 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300';
    return 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300';
  };

  const renderExploreTab = () => (
    <div className="space-y-8">
      {/* Search and Filter */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <input
            type="text"
            placeholder="Suche nach Emotionen..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
          />
        </div>
      </div>

      {/* Kategorie-Filter */}
      <div className="flex flex-wrap gap-3 justify-center">
        {categories.map((category) => (
          <motion.button
            key={category.id}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => setSelectedCategory(category.id)}
            className={`px-4 py-2 rounded-full font-semibold transition-all ${
              selectedCategory === category.id
                ? `bg-gradient-to-r ${category.color} text-white shadow-lg`
                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
            }`}
          >
            <span className="mr-2">{category.icon}</span>
            {category.name}
          </motion.button>
        ))}
      </div>

      {/* Emotionen-Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <AnimatePresence>
          {filteredEmotions.map((emotion) => (
            <motion.div
              key={emotion.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700 cursor-pointer hover:shadow-xl transition-all"
              onClick={() => setSelectedEmotion(emotion)}
            >
              <div className="flex items-center justify-between mb-4">
                <span className="text-4xl">{emotion.icon}</span>
                <span className={`px-3 py-1 bg-gradient-to-r ${getCategoryColor(emotion.category)} text-white rounded-full text-sm font-medium`}>
                  {categories.find(c => c.id === emotion.category)?.name}
                </span>
              </div>
              
              <h3 className="font-bold text-xl text-gray-800 dark:text-white mb-3">
                {emotion.name}
              </h3>
              
              <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
                {emotion.description}
              </p>
              
              <div className="flex items-center justify-between">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getIntensityColor(emotion.intensity)}`}>
                  Intensit√§t: {emotion.intensity}/10
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {emotion.exercises.length} √úbungen
                </span>
              </div>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>
    </div>
  );

  const renderTrackerTab = () => (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <h3 className="text-2xl font-bold text-gray-800 dark:text-white">
          üìä Emotions-Tracker
        </h3>
        <button
          onClick={() => setShowLogForm(true)}
          className="px-4 py-2 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-lg font-semibold hover:from-purple-600 hover:to-pink-700 transition-all"
        >
          Emotion erfassen
        </button>
      </div>

      {/* Emotion Log Form */}
      <AnimatePresence>
        {showLogForm && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg border border-gray-200 dark:border-gray-700"
          >
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Emotion:
                  </label>
                  <select
                    value={newLog.emotion || ''}
                    onChange={(e) => setNewLog(prev => ({ ...prev, emotion: e.target.value }))}
                    className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  >
                    <option value="">W√§hle eine Emotion...</option>
                    {emotions.map(emotion => (
                      <option key={emotion.id} value={emotion.name}>
                        {emotion.icon} {emotion.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Intensit√§t (1-10):
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="10"
                    value={newLog.intensity || 5}
                    onChange={(e) => setNewLog(prev => ({ ...prev, intensity: parseInt(e.target.value) }))}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700"
                  />
                  <div className="flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1">
                    <span>Schwach</span>
                    <span className="font-bold">{newLog.intensity}</span>
                    <span>Stark</span>
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Ausl√∂ser:
                </label>
                <input
                  type="text"
                  value={newLog.trigger || ''}
                  onChange={(e) => setNewLog(prev => ({ ...prev, trigger: e.target.value }))}
                  className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  placeholder="Was hat diese Emotion ausgel√∂st?"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Gedanken:
                </label>
                <textarea
                  value={newLog.thoughts || ''}
                  onChange={(e) => setNewLog(prev => ({ ...prev, thoughts: e.target.value }))}
                  className="w-full h-24 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  placeholder="Welche Gedanken hattest du?"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Kontext:
                  </label>
                  <input
                    type="text"
                    value={newLog.context || ''}
                    onChange={(e) => setNewLog(prev => ({ ...prev, context: e.target.value }))}
                    className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                    placeholder="Wo/mit wem warst du?"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Dauer (Minuten):
                  </label>
                  <input
                    type="number"
                    value={newLog.duration || 30}
                    onChange={(e) => setNewLog(prev => ({ ...prev, duration: parseInt(e.target.value) }))}
                    className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                    min="1"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Deine Reaktion:
                </label>
                <textarea
                  value={newLog.response || ''}
                  onChange={(e) => setNewLog(prev => ({ ...prev, response: e.target.value }))}
                  className="w-full h-20 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  placeholder="Wie hast du auf die Emotion reagiert?"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Reflexion:
                </label>
                <textarea
                  value={newLog.reflection || ''}
                  onChange={(e) => setNewLog(prev => ({ ...prev, reflection: e.target.value }))}
                  className="w-full h-20 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 dark:bg-gray-700 dark:text-white"
                  placeholder="Was lernst du aus dieser Erfahrung?"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={saveEmotionLog}
                  className="px-6 py-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg font-semibold hover:from-green-600 hover:to-emerald-700 transition-all"
                >
                  Eintrag speichern
                </button>
                <button
                  onClick={() => setShowLogForm(false)}
                  className="px-6 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-lg font-semibold transition-all"
                >
                  Abbrechen
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Recent Logs */}
      <div>
        <h4 className="text-xl font-bold text-gray-800 dark:text-white mb-4">
          Letzte Eintr√§ge ({emotionLogs.length})
        </h4>
        <div className="space-y-4">
          {emotionLogs.slice(-5).reverse().map((log) => {
            const emotion = emotions.find(e => e.name === log.emotion);
            return (
              <motion.div
                key={log.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-md border border-gray-200 dark:border-gray-700"
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">{emotion?.icon || 'üòê'}</span>
                    <div>
                      <h5 className="font-semibold text-gray-800 dark:text-white">
                        {log.emotion}
                      </h5>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        {new Date(log.timestamp).toLocaleDateString('de-DE')} um {new Date(log.timestamp).toLocaleTimeString('de-DE', { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </div>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getIntensityColor(log.intensity)}`}>
                    {log.intensity}/10
                  </span>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-gray-700 dark:text-gray-300">Ausl√∂ser:</span>
                    <p className="text-gray-600 dark:text-gray-400">{log.trigger}</p>
                  </div>
                  {log.context && (
                    <div>
                      <span className="font-medium text-gray-700 dark:text-gray-300">Kontext:</span>
                      <p className="text-gray-600 dark:text-gray-400">{log.context}</p>
                    </div>
                  )}
                </div>
                
                {log.thoughts && (
                  <div className="mt-3">
                    <span className="font-medium text-gray-700 dark:text-gray-300 text-sm">Gedanken:</span>
                    <p className="text-gray-600 dark:text-gray-400 text-sm">{log.thoughts}</p>
                  </div>
                )}
              </motion.div>
            );
          })}
        </div>
        
        {emotionLogs.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üìä</div>
            <h4 className="text-xl font-semibold text-gray-600 dark:text-gray-400 mb-2">
              Noch keine Emotionen erfasst
            </h4>
            <p className="text-gray-500 dark:text-gray-500">
              Beginne mit dem Tracking deiner Emotionen f√ºr bessere Selbstwahrnehmung
            </p>
          </div>
        )}
      </div>
    </div>
  );

  const renderPatternsTab = () => {
    const patterns = generateMoodPatterns();
    
    return (
      <div className="space-y-8">
        <div className="text-center">
          <h3 className="text-2xl font-bold text-gray-800 dark:text-white mb-4">
            üìà Deine Emotionsmuster
          </h3>
          <p className="text-gray-600 dark:text-gray-300">
            Erkenne Muster in deinen Emotionen und lerne mehr √ºber dich selbst
          </p>
        </div>

        {patterns.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üìà</div>
            <h4 className="text-xl font-semibold text-gray-600 dark:text-gray-400 mb-2">
              Nicht genug Daten f√ºr Muster
            </h4>
            <p className="text-gray-500 dark:text-gray-500 mb-6">
              Erfasse mindestens 5 Emotionen, um Muster zu erkennen
            </p>
            <button
              onClick={() => setActiveTab('tracker')}
              className="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-600 text-white rounded-lg font-semibold hover:from-purple-600 hover:to-pink-700 transition-all"
            >
              Emotionen erfassen
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {patterns.map((pattern) => {
              const emotion = emotions.find(e => e.name === pattern.emotion);
              return (
                <motion.div
                  key={pattern.emotion}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700"
                >
                  <div className="flex items-center space-x-4 mb-4">
                    <span className="text-3xl">{emotion?.icon || 'üòê'}</span>
                    <div>
                      <h4 className="text-xl font-bold text-gray-800 dark:text-white">
                        {pattern.emotion}
                      </h4>
                      <p className="text-sm text-gray-600 dark:text-gray-300">
                        {pattern.frequency} mal erfasst
                      </p>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                        Durchschnittliche Intensit√§t:
                      </span>
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${getIntensityColor(pattern.averageIntensity)}`}>
                        {pattern.averageIntensity}/10
                      </span>
                    </div>
                    
                    <div>
                      <span className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
                        H√§ufige Ausl√∂ser:
                      </span>
                      <div className="flex flex-wrap gap-2">
                        {pattern.commonTriggers.map((trigger, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300 rounded-full text-sm"
                          >
                            {trigger}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>
        )}
      </div>
    );
  };

  const renderExercisesTab = () => (
    <div className="space-y-8">
      <div className="text-center">
        <h3 className="text-2xl font-bold text-gray-800 dark:text-white mb-4">
          üßò‚Äç‚ôÄÔ∏è Emotions-√úbungen
        </h3>
        <p className="text-gray-600 dark:text-gray-300">
          Praktische √úbungen f√ºr den gesunden Umgang mit verschiedenen Emotionen
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {emotions.map((emotion) => (
          emotion.exercises.map((exercise) => (
            <motion.div
              key={`${emotion.id}-${exercise.id}`}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700"
            >
              <div className="flex items-center space-x-3 mb-4">
                <span className="text-2xl">{emotion.icon}</span>
                <div>
                  <h4 className="font-bold text-lg text-gray-800 dark:text-white">
                    {exercise.name}
                  </h4>
                  <p className="text-sm text-gray-600 dark:text-gray-300">
                    f√ºr {emotion.name}
                  </p>
                </div>
              </div>
              
              <p className="text-gray-600 dark:text-gray-300 text-sm mb-4">
                {exercise.description}
              </p>
              
              <div className="flex items-center justify-between mb-4 text-sm">
                <span className="flex items-center space-x-1">
                  <span>‚è±Ô∏è</span>
                  <span>{exercise.duration}</span>
                </span>
                <span className={`px-2 py-1 rounded text-xs font-medium ${
                  exercise.difficulty === 'einfach' ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300' :
                  exercise.difficulty === 'mittel' ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300' :
                  'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300'
                }`}>
                  {exercise.difficulty}
                </span>
              </div>
              
              <div className="space-y-3">
                <div>
                  <h5 className="font-semibold text-gray-700 dark:text-gray-300 mb-2 text-sm">
                    Schritte:
                  </h5>
                  <ol className="list-decimal list-inside space-y-1 text-sm text-gray-600 dark:text-gray-400">
                    {exercise.steps.map((step, index) => (
                      <li key={index}>{step}</li>
                    ))}
                  </ol>
                </div>
                
                <div>
                  <h5 className="font-semibold text-gray-700 dark:text-gray-300 mb-2 text-sm">
                    Vorteile:
                  </h5>
                  <ul className="list-disc list-inside space-y-1 text-sm text-gray-600 dark:text-gray-400">
                    {exercise.benefits.map((benefit, index) => (
                      <li key={index}>{benefit}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </motion.div>
          ))
        ))}
      </div>
    </div>
  );

  // Emotion Detail Modal
  const EmotionModal = ({ emotion, onClose }: { emotion: Emotion; onClose: () => void }) => (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <motion.div
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        exit={{ scale: 0.9, opacity: 0 }}
        className="bg-white dark:bg-gray-800 rounded-2xl p-8 max-w-4xl max-h-[90vh] overflow-y-auto shadow-2xl"
        onClick={(e) => e.stopPropagation()}
      >
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <span className="text-4xl">{emotion.icon}</span>
            <div>
              <h2 className="text-3xl font-bold text-gray-800 dark:text-white">
                {emotion.name}
              </h2>
              <span className={`px-3 py-1 bg-gradient-to-r ${getCategoryColor(emotion.category)} text-white rounded-full text-sm font-medium`}>
                {categories.find(c => c.id === emotion.category)?.name}
              </span>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 text-2xl"
          >
            √ó
          </button>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <div className="space-y-6">
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                üìù Beschreibung
              </h3>
              <p className="text-gray-700 dark:text-gray-300">{emotion.description}</p>
            </div>
            
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                üéØ Zweck
              </h3>
              <p className="text-gray-700 dark:text-gray-300">{emotion.purpose}</p>
            </div>
            
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                ‚ö° Ausl√∂ser
              </h3>
              <ul className="space-y-1">
                {emotion.triggers.map((trigger, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-blue-500 mt-1">‚Ä¢</span>
                    <span className="text-gray-700 dark:text-gray-300">{trigger}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                ü´Ä K√∂rperliche Empfindungen
              </h3>
              <ul className="space-y-1">
                {emotion.physicalSensations.map((sensation, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-red-500 mt-1">‚Ä¢</span>
                    <span className="text-gray-700 dark:text-gray-300">{sensation}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
          
          <div className="space-y-6">
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                üí≠ Typische Gedanken
              </h3>
              <ul className="space-y-1">
                {emotion.thoughts.map((thought, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-purple-500 mt-1">‚Ä¢</span>
                    <span className="text-gray-700 dark:text-gray-300 italic">"{thought}"</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                ‚úÖ Gesunder Ausdruck
              </h3>
              <ul className="space-y-1">
                {emotion.healthyExpression.map((expression, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    <span className="text-gray-700 dark:text-gray-300">{expression}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                ‚ö†Ô∏è Ungesunder Ausdruck
              </h3>
              <ul className="space-y-1">
                {emotion.unhealthyExpression.map((expression, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-red-500 mt-1">‚úó</span>
                    <span className="text-gray-700 dark:text-gray-300">{expression}</span>
                  </li>
                ))}
              </ul>
            </div>
            
            <div>
              <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-3">
                üõ†Ô∏è Management-Strategien
              </h3>
              <ul className="space-y-1">
                {emotion.managementStrategies.map((strategy, index) => (
                  <li key={index} className="flex items-start space-x-2">
                    <span className="text-blue-500 mt-1">‚Üí</span>
                    <span className="text-gray-700 dark:text-gray-300">{strategy}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
        
        {emotion.quotes.length > 0 && (
          <div className="mt-8 pt-6 border-t border-gray-200 dark:border-gray-700">
            <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-4">
              üí¨ Inspirierende Zitate
            </h3>
            <div className="space-y-3">
              {emotion.quotes.map((quote, index) => (
                <blockquote key={index} className="italic text-gray-600 dark:text-gray-400 border-l-4 border-purple-500 pl-4">
                  "{quote}"
                </blockquote>
              ))}
            </div>
          </div>
        )}
      </motion.div>
    </motion.div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50 dark:from-gray-900 dark:via-purple-900/20 dark:to-indigo-900/20">
      <div className="container mx-auto px-6 py-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-600 to-pink-600 mb-4">
            Emotionserkl√§rungs-System
          </h1>
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
            Verstehe deine Emotionen, lerne sie zu regulieren und entwickle emotionale Intelligenz
          </p>
        </motion.div>

        {/* Tab Navigation */}
        <div className="flex flex-wrap justify-center mb-8 space-x-2">
          {[
            { id: 'explore', label: 'Emotionen erkunden', icon: 'üé≠' },
            { id: 'tracker', label: 'Emotions-Tracker', icon: 'üìä' },
            { id: 'patterns', label: 'Meine Muster', icon: 'üìà' },
            { id: 'exercises', label: '√úbungen', icon: 'üßò‚Äç‚ôÄÔ∏è' }
          ].map((tab) => (
            <motion.button
              key={tab.id}
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setActiveTab(tab.id as any)}
              className={`px-6 py-3 rounded-xl font-semibold transition-all ${
                activeTab === tab.id
                  ? 'bg-gradient-to-r from-purple-500 to-pink-600 text-white shadow-lg'
                  : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
              }`}
            >
              <span className="mr-2">{tab.icon}</span>
              {tab.label}
            </motion.button>
          ))}
        </div>

        {/* Tab Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.3 }}
        >
          {activeTab === 'explore' && renderExploreTab()}
          {activeTab === 'tracker' && renderTrackerTab()}
          {activeTab === 'patterns' && renderPatternsTab()}
          {activeTab === 'exercises' && renderExercisesTab()}
        </motion.div>

        {/* Emotion Detail Modal */}
        <AnimatePresence>
          {selectedEmotion && (
            <EmotionModal 
              emotion={selectedEmotion} 
              onClose={() => setSelectedEmotion(null)} 
            />
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}
